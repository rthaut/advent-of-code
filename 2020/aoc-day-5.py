import math

tickets = [
"BFBFFFFLLL",
"BBFBBFBRLL",
"BFBBFFFRRR",
"FBFFBBBLLL",
"FFBBFBBRLL",
"BBBFFFFLRL",
"BFBBBFBRRR",
"FBBFFFBLRL",
"FFBFBBFLLR",
"FBFFFFBLRL",
"BBFFBBFRLL",
"BBFBBBBLLR",
"FFBBBBFRLR",
"BBFFBFFRLR",
"BFFBBFFRRL",
"BBFBBBFLLR",
"FBFBBBBRRL",
"BFFFBFFLRL",
"FBFFFBFRLL",
"FBBBFFBLRR",
"FFFBFBBRLR",
"FBBFBBFLLR",
"FBFBFFFLRL",
"BFFBFBFLLR",
"BBFBFBBRRL",
"BFFBBFBRLR",
"FBFBFFFRRL",
"BFBFFBBRRL",
"FBFBFBFLLL",
"BFFBFFBRRL",
"FFBBBBBRRL",
"FFFBFBFRLR",
"BBFFFBBLRL",
"BFBFBFFRLL",
"BFBFFFBRLR",
"FBBBFFFRRR",
"BBFFFBFRLL",
"FBBBFBFRLL",
"FFBBBFFLRR",
"FBFBBFBLRL",
"FBBBBBFLLR",
"FBFFBBBLRL",
"FFFBBFFRRL",
"FBBBFFFRLR",
"BBFBFFFRLR",
"BBFBBFBLLL",
"FBFFBBBRRL",
"BFFFFBFRRR",
"FBBFFBFLRR",
"FBFBBBFLRL",
"BFBBBBBRRL",
"BBFFFFBLRL",
"FBFFFBFLLL",
"FFFBBFFLLR",
"FBBBFBFLRR",
"BBBFFBFRRL",
"BFBFFFFRLR",
"FFBFFFBRLR",
"FBFFBFBRLL",
"FBBFFFFRLL",
"FFFBBFBRRR",
"FBBBBFFLRR",
"BFBBBFBRLR",
"BFFFFFFRRR",
"FFBBBBFRRR",
"BFFBFBFRRL",
"BFFBFFFRLR",
"BBFFBFBLRR",
"FBFFFBBLLL",
"FBFFFFFRLR",
"BFBBFBFLRR",
"FBBBBBBLRL",
"BFFFFBBLRR",
"BFFBFFFRRR",
"FBFFFBFLRL",
"BFBBFFBLRR",
"BBFBBBBLLL",
"BBFBBBFRRL",
"FBBBBBBRLR",
"BFFBFBFLRR",
"BFFBFFFLLR",
"FBBBBBFLRL",
"FBFFFBFRRL",
"FFBBBBFRRL",
"BFBBBBBRLR",
"FBBBBBFRRL",
"FFBFBFFLLL",
"BBBFFFFRRL",
"BBFBBFBRRR",
"BFBFFFFRLL",
"FBFFFFFLLR",
"FFFBBFFLRL",
"FBFFBFFLRR",
"FBFFBBFRLR",
"FFBBBFBLLR",
"BFFFFBFLRR",
"BBFBFBFRRR",
"FBBFBBBLLL",
"FBBFBFBLLL",
"FBBBFFBLRL",
"BBBFFBFRRR",
"FBBBFBFLRL",
"FBFFFBFRRR",
"FBFFBFBRRR",
"FFBBFFBRLL",
"BFBFBFBLLR",
"BBFFFFBRRR",
"FBBBBBBLLR",
"FBBBBFFRLR",
"BBFBBFFLRL",
"BFBBFBFLLR",
"FBFFFFFRLL",
"FFBBFFFLLR",
"BBFFFBFRRR",
"BFBBBFFLLR",
"BBFFFFBRLR",
"FFBFBBFRLR",
"BFBFFFBLLL",
"FBFFBFFLLL",
"FBBBFBBRLR",
"BBFBFFFLLR",
"FBFFFBBRLR",
"BFFBFBBLLL",
"BFFBBFFLLR",
"FBBFFBBRLR",
"BBFBFFBRLL",
"FBFBBBFRRL",
"BFBBBFBLLR",
"BBFFBBBRLL",
"BBBFFFBLRL",
"BBFBFFBRLR",
"BFFBBBFRRR",
"FFFBFBBRLL",
"FBFBFBBRLL",
"BFFFFFBRLR",
"FBFFBBBRRR",
"FBFFBBFLRL",
"BFFFBBBRLL",
"FBBBBFFLLL",
"BBFBFFFRRR",
"BFBFBBFLLL",
"FFBBFBFRRL",
"FFFBBBBRLR",
"BFFBBBBRLL",
"FFBFBBFRRL",
"FBFBFBFRLL",
"BBBFFFBRRL",
"BBBFFBFRLR",
"FBFBFBFLLR",
"BBFBBFFRLL",
"FBFBFFFLLR",
"BBFBFBFRRL",
"BFFBBFBRRL",
"FFBFFBFRLR",
"BFFBBFBRRR",
"FFBBFFBRRL",
"BFFFFBBRRL",
"FBBBBFFRLL",
"FBBBFFBRRR",
"FBBFFBFLLL",
"BBBFFBFRLL",
"FFFBBFBLLR",
"BFFBBFFLRR",
"BFBFBFFLLL",
"BFBFFBBLRL",
"FFFBBFBLRR",
"BBFFBFBLLL",
"FBBBFBFRRL",
"BFBBBBBLLR",
"BBFBFBBLLL",
"FFBFBFFLRR",
"BFFFFFFLLR",
"BFBFBFFRRL",
"BFBFBBFLLR",
"FBBBBFFLLR",
"FFBBFFBLLL",
"BBFFBFBRRR",
"FFFBBFBLRL",
"FBFBFFBLRL",
"BFBBBBBLLL",
"BFFFFBFRRL",
"FBFFFFFLRL",
"BFFFBFBLRL",
"BFFBFBFLLL",
"BBFBBBFRRR",
"FBFBFFBLRR",
"FBFBBBBRLL",
"BBFFFFFLRL",
"FBBFFFBRRR",
"FBFFFBBRLL",
"BFFFBFFLLL",
"BFFBBFFLRL",
"FFBFFFBLLL",
"BFBFBBBLLL",
"FBBFBFBLRR",
"FBFFBFFLLR",
"FBFFBBFRRR",
"BBFFFBFLLR",
"BBFBBFBLRL",
"FBFBBBFRRR",
"BBFFFFBLLR",
"FFBFBFBLRL",
"FFBBBBBLLR",
"FBFBFBBLRR",
"FFBBBFFRLL",
"FBBFBFBRLL",
"BBFBFFBRRL",
"BFBFFBFLRR",
"BFBFFBBRLR",
"FBBFFFFRRL",
"FBFFFFFLLL",
"FBFBBFBRLR",
"BBFBBFBLRR",
"BFBBBFFRLR",
"FBFFBBBLRR",
"FBFBFBBRRL",
"BBFFBBFLRL",
"BBFFFFBLRR",
"FFBBFFBLLR",
"BFBBFBBLRR",
"BBFBFBBRLL",
"BBFFFBFLLL",
"FBBFBBBRRR",
"BFBFBBFRLL",
"FFBBFFBLRL",
"FFFBBBFRRR",
"BFBFFFBLRR",
"BBFBFBBRRR",
"BFBFFBBLLR",
"BFFFBBBRLR",
"FFBBBBBRLL",
"FFFBBFBLLL",
"FBFBBBBLRR",
"FFBFFBBRLL",
"BFBBBBFLLL",
"BFFFBFFRLL",
"BBFFFBFLRR",
"BFBFFFFLRR",
"BFBFBBBRLR",
"BBFBBBFLRL",
"FBBFFFFLLR",
"FFFBBBBLLL",
"BBBFFBFLLL",
"FBFFBBBRLL",
"FBFBFFFLLL",
"FBBFFBFLLR",
"BFBFBBFRRL",
"BFFFFBBRLL",
"FBFBFFBLLL",
"BBFFFFFLLL",
"FFBBBBFLLR",
"FBFBBBFLLR",
"BFBBFFBRRL",
"FBBFFBBRLL",
"BFBFFFFLLR",
"BBFBFFFLRL",
"BFFFBFBLRR",
"FBBFBBFRRR",
"FFBFBFFRRL",
"BBFFFBBLLR",
"BFBFBFFLRL",
"BFBFFFBLRL",
"FBFBBBFLLL",
"FBBFFBBLLL",
"BBBFFBFLLR",
"BFFFBBFLRL",
"BFFFBFFLLR",
"BBBFFFFLRR",
"BBFFBFFLLR",
"BBFFFBBRRR",
"BBBFFFBLLR",
"BFBBBBFRLR",
"FBBFBBBRLL",
"BFBBFFBRLL",
"FBFBFBFLRR",
"BBFFFBFLRL",
"FBFBFFBRLL",
"FBBFBFBRLR",
"FFBFBBFLRL",
"BBFBBBFLRR",
"BFFBFBBLRL",
"BFFBBBBRLR",
"BFFFFFBRRR",
"FBBFFFBRRL",
"BFBFFBFLLR",
"FBBFBBFLRL",
"FBBBBBBLRR",
"BFBBBFBRRL",
"BFFFBFBLLL",
"FBFFFBBRRR",
"FFBBFFBRLR",
"BBFFFFFRRL",
"FFBFBBBRRL",
"FFBFBBFLRR",
"BFFFBBBRRL",
"FFBFBFBLRR",
"BBFFBFBRLL",
"BBFBBFBRRL",
"BBFBBFFRLR",
"FBBFBFFRLR",
"BFBBFFBLLL",
"BBFBFBFRLL",
"FFBBBFFLLL",
"FFBBBBBLRR",
"FBBFBBFRRL",
"BBFFBFBRLR",
"BFFFBBFRRL",
"BBFBBFFLLR",
"FBFFBBFLRR",
"BFBFBBBLLR",
"FFFBBBBRLL",
"BBFFFFFLRR",
"BFBBFFBLRL",
"BFBBFFFLLR",
"FFFBFBFLLL",
"FFBFFFFLLR",
"FBFFFBFLLR",
"BBBFFFFLLR",
"BFFBFFFLLL",
"FFFBBFBRRL",
"FBBFFFFLLL",
"FFFBBBFRLL",
"BBFBBBBLRR",
"FFFBBBFLRR",
"FFBBFBFRRR",
"BFBFBBBLRL",
"BBFBBBFLLL",
"FBBBFFBRLR",
"BFFFBBBRRR",
"FFBBBBFLRR",
"FFBBFBBRRL",
"FBBFFBFRLR",
"BBFFBBFRRR",
"BBFBBFBRLR",
"BFFBBFBLRR",
"FFBBBBBLRL",
"BBFFBBBRRR",
"BFFFBFBRRR",
"BFFFFFFRRL",
"BBFFBFBLRL",
"FBFFFFBLRR",
"FBFBBFFRRL",
"BFBFFFBLLR",
"FFFBFBBLRL",
"BFFFFFFRLL",
"BBFFFBBRRL",
"FFBFBFBRRL",
"FBBFBFFLLL",
"FBFFBFBLRR",
"BFFFFBBRLR",
"FFBFFFBLRR",
"BFBFFFBRRL",
"FBBFFBFRLL",
"FBFBBFBRRR",
"FBBBFBFLLR",
"FBBFFFBLLR",
"BFFFFBFLLR",
"FBBBBBBRLL",
"BBBFFFFRLL",
"BFFFBBBLRL",
"FFFBFBFLLR",
"FBFBBBBLLR",
"FBFFBFFRRR",
"BFFFBBBLLL",
"BFBBFFBRRR",
"FBBBBFFRRR",
"BFBFBBFLRR",
"BFFBFFBLRL",
"BBFBFFFRLL",
"FFFBBFBRLL",
"FBBFFFFRLR",
"FFBBFBBRLR",
"BBFFFBBLLL",
"BBFFFBBRLL",
"FBBFFFFRRR",
"BFBFBFBLRR",
"FFBFFFFRRR",
"FBFBFBFLRL",
"FFBFBBFLLL",
"FFBFBBBRLR",
"BFBFFFBRLL",
"FFBFFBBLRL",
"BFBBBBBRLL",
"BBFBFFBLRR",
"FBFFFFBRLR",
"FFBBBFBRRR",
"BFBFBBBRRR",
"FBBBBBFRRR",
"FBBFBBBLRR",
"BBFBBBBRRL",
"BFFBBBFRLL",
"BBFBFBFLLR",
"FFBBFFBRRR",
"BFFFBBBLLR",
"BFFFBBBLRR",
"FFFBFBFRRR",
"BFBFBFBRRL",
"FFBBBFBRRL",
"FFFBBBBRRR",
"FBFFBFFRRL",
"BFFBFFFRRL",
"FFFBBBFLRL",
"FBBBBFFLRL",
"FFBFFBBRLR",
"FBBFBBBLRL",
"FFBFFFFLRR",
"FBFFBFBRLR",
"FBBFBBBRRL",
"FFBBBFBRLL",
"BFFFFFBLRL",
"FFFBBFFRLR",
"BFBFFFBRRR",
"FFBBFFFLRL",
"FBBBBFBRLR",
"FFBBBBFRLL",
"FFBFFBBLLR",
"FBFFFFBLLL",
"FBFBBBBLLL",
"BFFFBFBRRL",
"FBBBBBFLLL",
"FFBBFFFRLL",
"FBBBFFFLLR",
"BFFBBBBLLR",
"BFBFBFFRLR",
"BFBFFBBLLL",
"FBFBBFFLRR",
"FFBBFFFRRL",
"FBFBBFFRLL",
"BFFFFBFLLL",
"FBBBFBBLLL",
"FBFBFFFRLR",
"BFFBBBBLRL",
"FFBFFFFRLL",
"BFBBFBBLLR",
"FFBBFBBLRL",
"FBFBBFBLRR",
"FBBBBBBRRL",
"FFBFBBFRRR",
"FBFFBBFRLL",
"FBBFFFBRLL",
"BFFFBFBRLR",
"BFFBFFBLRR",
"BBBFFFBRLL",
"BFBFFBBLRR",
"BFBBBFBRLL",
"BBFBFBFRLR",
"FFFBFBBRRL",
"BFFFFBBLLR",
"FBFFBBBRLR",
"BFBFFBFRLL",
"FBFBFFBRRL",
"BFFFFFFLLL",
"BFFFBBFLLR",
"BFFFBFBRLL",
"BFBBBBBLRL",
"BFFFFBFRLR",
"BBFBFBFLRL",
"FBBBBBFRLL",
"BBFFBFFLRR",
"FBFBFFBRLR",
"FFBBBFBLRR",
"FBBFFFBLRR",
"BFBBBFBLRL",
"BFFFBFBLLR",
"BBFFBBFRLR",
"BFBBFFFLRR",
"BFFBFBBRLR",
"FFBBFFFLLL",
"FBBBFBFLLL",
"BFBBBBFLRL",
"FFBBBBBRRR",
"FBBFFFBLLL",
"BFBBFBBLLL",
"FBBBBFBRLL",
"FBBFBFFLRL",
"BFFBBFBLLL",
"FBBBFBBRRR",
"BFFBFBFRLL",
"BBFFBBBLRL",
"BFBFBFBLRL",
"FBBBFFFLLL",
"BFFFBFFRRL",
"FFBFFBFLLR",
"BFFBFBBLRR",
"BFFFFFBRLL",
"BFBFBBBLRR",
"FFFBBBBLRL",
"BFBBBBBRRR",
"BFFBFBFRLR",
"BFFBBFFLLL",
"BBFBBFFRRL",
"FBBBFFFLRL",
"FBFFBFFRLL",
"FBFFFBFLRR",
"FBBBFBBLLR",
"BBFFFFBLLL",
"BFFFBBFRLR",
"BBFBFBBLRR",
"FBBFBBBRLR",
"FBFFFBBRRL",
"FBBBFFBLLR",
"FFBBBBFLLL",
"BFFBFFBLLL",
"FFBFBFBLLR",
"BBFFBBBLLL",
"BBFFFFFRLL",
"BBFFFBBLRR",
"FFFBBBFRRL",
"BFFBFBBRRR",
"BFFBBFFRLL",
"FFFBBBFLLL",
"FBFFFFFRRR",
"FBBFBBFLRR",
"FFBBFBFRLL",
"FFFBFBFRLL",
"FBBBFBBRLL",
"BBFFBFFLRL",
"FFFBBBBLLR",
"BFFBFBBRLL",
"BFBFFBFRLR",
"BFFBFBBLLR",
"BFFFBBFLLL",
"BFFFFBFLRL",
"FBFBBBBRRR",
"FFBBBBFLRL",
"BBFFFFBRLL",
"FFBBBFFRRR",
"FBFBBFBLLR",
"FBBBFBBLRR",
"BBBFFFFLLL",
"BBFBBFBLLR",
"BFBBFFBRLR",
"BFBBBBFRRL",
"FBBFFBBLRL",
"BFFBFBFRRR",
"BFBFBBFLRL",
"FBFBBFFRLR",
"FBBFBBFRLL",
"FFBBFBFLRR",
"BFBBFBFRRL",
"BFBBBFFLRR",
"BFBBFBBRRR",
"FFBBBBBRLR",
"BFBBFBFRLR",
"FFBFFBFRRR",
"BFFFFBBLRL",
"BFFBBFBLLR",
"BFFBBBFLRR",
"FFBFFFBRLL",
"BBBFFFBLLL",
"FBBFBBFLLL",
"BBFFFBFRRL",
"FBBBFFFLRR",
"FBBFBFBRRR",
"FBBBFFFRRL",
"BFFBBBFLLL",
"BFBBFBBLRL",
"FFBBFBBLLL",
"BFBBBBFLLR",
"FBFFFFBRRR",
"FBBFFFFLRR",
"FFFBFBBLLR",
"BFBBFFFLRL",
"FFBFFBBLRR",
"FFBFBFBRLL",
"FFBFFFBLRL",
"FFFBBFFRRR",
"FBBFBFFLRR",
"FBFFBFBRRL",
"BBFFBBFLLR",
"FFBFFFBRRL",
"BBFFBFFRRR",
"FFBBBFBLRL",
"FBBFFBFLRL",
"FBFBBBFRLL",
"BFFFFBBLLL",
"BFFBBBBRRR",
"FFBFBFBRRR",
"FFBFBBBLLL",
"BBFFBFFLLL",
"BFFBFBBRRL",
"FFBBFBFLRL",
"FFBBFFFRLR",
"BFBFBFFLLR",
"BFBFBBFRLR",
"FFFBFBBLRR",
"BFFBFFBRRR",
"BFFBFFFLRR",
"FFBFFFBRRR",
"FBBBFFBLLL",
"FBFFBFBLLR",
"BBFBFFBLLL",
"FFBFBBFRLL",
"BBFFFFBRRL",
"FBFBFBBLLR",
"FBFBFBBLLL",
"FBBFBFFRRR",
"FBFBBFBLLL",
"BBFFBBFLRR",
"BBFBFFBLRL",
"FBFBFBBLRL",
"BFFFFFBLLL",
"BFFBBBFLLR",
"BFBBBBBLRR",
"FBFBBFBRLL",
"FBFFFFBLLR",
"BBFFBBBLRR",
"FBFFFFFRRL",
"FBFBFBFRLR",
"BFFFBBFRLL",
"BFFBFFBLLR",
"BFBFFFFRRL",
"FFBFFBFRRL",
"FBBFBFFRLL",
"FFBBBFBRLR",
"BFBBBFFLRL",
"FBBBBFBRRL",
"FFFBFBFRRL",
"BBFBBBFRLR",
"BFFBFBFLRL",
"BFFBBFBLRL",
"FBFBFBFRRR",
"FBBFFBBRRL",
"FBFFBFFLRL",
"BFBFFFFRRR",
"FFBBFBFLLL",
"FFFBBFBRLR",
"BBFFBBBLLR",
"BBFBFBFLRR",
"BFFFFFBLLR",
"BBFBFBBRLR",
"FBFBFFFLRR",
"BFBFFBFLLL",
"BBFBBFFLLL",
"FBBBFBBRRL",
"FBFBFBBRLR",
"FFBBBFFLLR",
"BFFFFFBLRR",
"BBFBFFFLRR",
"FFBFBBBRLL",
"BBFBFBFLLL",
"BBFBBFFRRR",
"BBFBBFFLRR",
"FFBFBBBRRR",
"FBFBFBFRRL",
"BFFFFFFLRR",
"BFBFBBFRRR",
"FFFBBFFLLL",
"FBFBBFFLRL",
"FBFFBBBLLR",
"BFFBBBBLLL",
"FFBFFBFLLL",
"FBFBFFBRRR",
"BFBBBFFRRR",
"BBBFFFFRRR",
"BFBFBFBLLL",
"FFBFBBBLRR",
"BBFFBBBRLR",
"FFBBFFBLRR",
"BFBFBBBRRL",
"FFBBFFFLRR",
"FFFBBBBRRL",
"BFBBFBFLLL",
"FBBBBFBLRR",
"BBFBFFFRRL",
"FFBBFBFLLR",
"BFFFFBBRRR",
"BBFFBBFLLL",
"FBFFBFBLLL",
"BFBBFFFLLL",
"FFBFFFBLLR",
"FBFFFBBLLR",
"BFBBBFFRRL",
"FBFBBBFRLR",
"FFBFFBFLRR",
"BBFFFFFLLR",
"FBBFBFFLLR",
"BBFFBFBRRL",
"BFBFBFFLRR",
"BBFBFFFLLL",
"BBFFFBBRLR",
"BFBFFBBRLL",
"BFBFBFBRLR",
"BBFBBBBRLL",
"BFBBFBBRLL",
"FFBFBBBLRL",
"BFBFBBBRLL",
"FBBFBFBLRL",
"FBFFFBBLRR",
"BBFFBBBRRL",
"BFBFFBFRRR",
"BBBFFFBLRR",
"FFBBBFFRRL",
"FBBFFBFRRL",
"BFFFBFFRLR",
"FBFFBFFRLR",
"FFFBFBBLLL",
"FFBFBFFRRR",
"BBFFBFFRRL",
"FFFBFBFLRL",
"BFFBBFFRRR",
"FFBBBFFLRL",
"FBFBFFBLLR",
"FBFFBBFRRL",
"BFFBBFFRLR",
"BFFBFFBRLR",
"BFFBFFFLRL",
"FBFFFFFLRR",
"FFFBBBBLRR",
"BFBBFFBLLR",
"BFBBFBBRLR",
"BFFFFBFRLL",
"BBFFFBFRLR",
"FBFBFFFRRR",
"FFFBBFFLRR",
"FBBBBFBLLR",
"FBBBBBFRLR",
"FFBFBFBLLL",
"FBFBBFFLLL",
"BBFBBBBRLR",
"BBFFBBFRRL",
"BBFBBBFRLL",
"BFBBFBFLRL",
"BFBBBFFRLL",
"FBFBFBBRRR",
"FBBBBBBLLL",
"BFBFFBBRRR",
"FBBFFBBRRR",
"BFFFFFBRRL",
"FFBBFFFRRR",
"FFBFFBBLLL",
"BBBFFBFLRR",
"BBFBBBBRRR",
"FBFBFFFRLL",
"FBBBFBFRRR",
"FBBBBFFRRL",
"BFFFFFFLRL",
"FBBBBBFLRR",
"BFFBBBFLRL",
"BFBBFFFRLR",
"FFBFFFFRLR",
"FFBBBFFRLR",
"BFBBFBBRRL",
"FFBFBFFLLR",
"BBBFFFFRLR",
"BBFFFFFRLR",
"FBBFFBBLLR",
"BFBFFBFRRL",
"BFFFBFFLRR",
"FFBFBFBRLR",
"BFFFBFFRRR",
"BFFBBBBRRL",
"FFBBBBBLLL",
"BFFBBBFRLR",
"FBFFFBFRLR",
"FFBFBFFRLR",
"BFBBBFBLLL",
"FBFBBFBRRL",
"BBFBFBBLRL",
"BFBBFBFRLL",
"BFBBBFFLLL",
"FBBFBBBLLR",
"FBFFFFBRRL",
"FBBBBBBRRR",
"FBFBBBBLRL",
"FFFBFBBRRR",
"FFBFBFFLRL",
"FBFFBBFLLR",
"FFBBFBBLRR",
"BBFBFBBLLR",
"FFFBFBFLRR",
"BBBFFFBRRR",
"FFBFFBBRRR",
"FFBFFBBRRL",
"FBBFFFFLRL",
"FBFBBFFRRR",
"BFBBFFFRLL",
"FFFBBBFLLR",
"FBBBBFBLLL",
"BBFBBBBLRL",
"BBFBFFBRRR",
"BFFBBBBLRR",
"FBBBBFBRRR",
"BFBFBFFRRR",
"BFFBBFBRLL",
"FFBBBFBLLL",
"BFBFFBFLRL",
"BFFFBBFLRR",
"FBBBBFBLRL",
"FBBFBFFRRL",
"FFFBBFFRLL",
"FBFFFBBLRL",
"FBBFFFBRLR",
"FBBFBFBRRL",
"FFBFFFFRRL",
"FBFBBFFLLR",
"FBFFBBFLLL",
"FBBFBFBLLR",
"BFFBBBFRRL",
"FFBBFBBLLR",
"BFBBFBFRRR",
"BFFFFFFRLR",
"FBBBFFFRLL",
"FFBFFBFLRL",
"FFBFFFFLRL",
"BBBFFFBRLR",
"BFFBFFBRLL",
"BBBFFBFLRL",
"FBBBFFBRRL",
"BFBFBFBRRR",
"FFFBBBFRLR",
"BBFFBFBLLR",
"BFBBBBFRLL",
"BBFBFFBLLR",
"FFBBFBBRRR",
"FBBBFBBLRL",
"BFBBBBFRRR",
"BFBFBFBRLL",
"BFBBFFFRRL",
"FFBFBFFRLL",
"FBBFBBFRLR",
"BFFBFFFRLL",
"BFBBBFBLRR",
"BBFFFFFRRR",
"FBFBBBBRLR",
"FFBBFBFRLR",
"FFBFFFFLLL",
"FBBFFBFRRR",
"FFBFFBFRLL",
"FBBFFBBLRR",
"FBBBFBFRLR",
"BFBBBBFLRR",
"FFBFBBBLLR",
"BFFFBBFRRR",
"FBBBFFBRLL",
"FBFBBBFLRR",
"BBFFBFFRLL",
"FBFFFFBRLL",
"FBFFBFBLRL"
]

def get_position(partition, lower, upper, lowerIndicator, upperIndicator):
	direction = partition[0]
	if ((upper - lower == 1)):
		# print("getting position from indicator \"{}\" for values {} and {}".format(direction, lower, upper))
		# this is the exit condition for the recursion, as the lower and upper numbers are only 1 number apart
		if (direction == lowerIndicator):
			# print("  using lower value ({})".format(lower))
			return lower
		elif (direction == upperIndicator):
			# print("  using upper value ({})".format(upper))
			return upper

	# print("getting position from partition \"{}\" for range {}-{}".format(partition, lower, upper))

	# to split the range, we need the midpoint (this will be a float ending in .5)
	middle = (lower + upper ) / 2
	nextPartition = partition[1:]
	if (direction == lowerIndicator):
		# print("  using lower half ({}-{}) for next partition \"{}\"".format(lower, math.floor(middle), nextPartition))
		return get_position(nextPartition, lower, math.floor(middle), lowerIndicator, upperIndicator)
	elif (direction == upperIndicator):
		# print("  using upper half ({}-{}) for next partition \"{}\"".format(math.ceil(middle), upper, nextPartition))
		return get_position(nextPartition, math.ceil(middle), upper, lowerIndicator, upperIndicator)

def get_seat(partition):
	row = get_position(partition[:7], 0, 127, "F", "B")
	col = get_position(partition[-3:], 0, 7, "L", "R")
	return row, col

def get_seat_id(partition):
	row, col = get_seat(partition)
	id = int(row * 8 + col)
	# print("row {}, column {}, seat ID {}".format(row, col, id))
	return id

# print(get_seat_id("BFFFBBFRRR")) # row 70, column 7, seat ID 567
# print(get_seat_id("FFFBBBFRRR")) # row 14, column 7, seat ID 119
# print(get_seat_id("BBFFBBFRLL")) # row 102, column 4, seat ID 820

seats = []
for ticket in tickets:
	id = get_seat_id(ticket)
	seats.append(id)

seats.sort()

min = seats[0]
max = seats[-1]
print("highest seat id: " + str(max))

all = list(range(min, max + 1))

diff = list(set(all) - set(seats))
print("missing seat id: " + str(diff[0]))
